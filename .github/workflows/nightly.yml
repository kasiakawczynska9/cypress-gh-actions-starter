name: Nightly Regression

on:
  schedule:
    - cron: '0 6 * * *'   # codziennie 06:00 UTC (~07:00 PL w zimie/08:00 w lecie)
  workflow_dispatch:       # możliwość ręcznego odpalenia z UI

jobs:
  regression:
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Clean previous reports
        run: rm -rf cypress/reports

      - run: npm ci

      - name: Ensure report CLIs available
        run: |
          npx --yes mochawesome-merge --version
          npx --yes mochawesome-report-generator --version

      # Pełna regresja
      - name: Run full Cypress regression
        id: run-regression
        continue-on-error: true
        run: |
          echo "Running full Cypress test suite..."
          npx cypress run; CODE=$?
          echo "CYPRESS_EXIT=$CODE" >> "$GITHUB_ENV"
          exit 0

      # Zbuduj raport tak jak w CI (HTML -> merge JSON -> fallback)
      - name: Locate mochawesome JSON
        if: ${{ always() }}
        id: mochawesome
        run: |
          shopt -s nullglob
          FILES=(cypress/reports/mochawesome/*.json)
          if [ ${#FILES[@]} -eq 0 ]; then
            echo "has_reports=false" >> "$GITHUB_OUTPUT"
            echo "Found mochawesome JSON files: 0"
          else
            echo "Found mochawesome JSON files: ${#FILES[@]}"
            printf '%s\n' "${FILES[@]}"
            echo "has_reports=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Build regression HTML report
        if: ${{ steps.mochawesome.outputs.has_reports == 'true' }}
        run: |
          set -eo pipefail
          REPORT_ROOT="cypress/reports"
          OUTPUT_DIR="${REPORT_ROOT}/regression"

          mkdir -p "${OUTPUT_DIR}"
          npx mochawesome-merge "${REPORT_ROOT}/mochawesome"/*.json > "${REPORT_ROOT}/mochawesome.json"
          npx mochawesome-report-generator "${REPORT_ROOT}/mochawesome.json" \
            -o "${OUTPUT_DIR}" \
            -f "index" \
            --inline \
            --overwrite
          cp -f "${OUTPUT_DIR}/index.html" "${REPORT_ROOT}/index.html"

      # Opublikuj artefakt (cypress/reports z redirectem)
      - name: Configure GitHub Pages
        if: ${{ steps.mochawesome.outputs.has_reports == 'true' }}
        uses: actions/configure-pages@v5

      - name: Upload Pages artifact (cypress/reports)
        if: ${{ steps.mochawesome.outputs.has_reports == 'true' }}
        uses: actions/upload-pages-artifact@v3
        with:
          path: cypress/reports

      # Deploy na GitHub Pages
      - name: Deploy regression report to GitHub Pages
        if: ${{ steps.mochawesome.outputs.has_reports == 'true' }}
        id: deployment
        uses: actions/deploy-pages@v4

      # Podaj link do raportu
      - name: Show deployed URL in logs & summary
        if: ${{ steps.mochawesome.outputs.has_reports == 'true' }}
        run: |
          echo "Base Pages URL: ${{ steps.deployment.outputs.page_url }}"
          echo "Regression URL: ${{ steps.deployment.outputs.page_url }}regression/"
          {
            echo "### Nightly Regression Report"
            echo ""
            echo "- Base: ${{ steps.deployment.outputs.page_url }}"
            echo "- **Regression:** ${{ steps.deployment.outputs.page_url }}regression/"
          } >> "$GITHUB_STEP_SUMMARY"


      # Ustaw job na "failed" jeśli Cypress padł (po publikacji raportu)
      - name: Mark job failed if Cypress failed
        if: ${{ env.CYPRESS_EXIT != '0' }}
        run: exit 1
