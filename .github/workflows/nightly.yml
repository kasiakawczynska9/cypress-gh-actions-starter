name: Nightly Full Regression

on:
  schedule:
    - cron: '0 1 * * *'   # codziennie 01:00 UTC
  workflow_dispatch:       # pozwala uruchomić ręcznie z UI

jobs:
  full-regression:
    runs-on: ubuntu-latest
    concurrency:
      group: nightly-${{ github.ref }}
      cancel-in-progress: false
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - run: npm ci

      # Uruchom wszystkie testy Cypress
      - name: Run ALL Cypress specs
        run: npx cypress run

      # Pokaż co reporter wygenerował
      - name: List mochawesome outputs
        run: |
          echo "Listing cypress/reports recursively:"
          ls -Rla cypress/reports || true

      # Zbuduj HTML raport w sposób odporny (jak w CI)
      - name: Build HTML report (robust)
        run: |
          set -e
          mkdir -p report

          echo "1) If reporter produced HTML – copy it"
          if [ -f "cypress/reports/test-results.html" ]; then
            cp cypress/reports/test-results.html report/index.html
            echo "Copied cypress/reports/test-results.html -> report/index.html"
            ls -la report
          else
            echo "2) If JSONs exist – merge and build HTML"
            JSONS="$(find cypress/reports -type f -name '*.json' -print | tr '\n' ' ' || true)"
            echo "Found JSONs: $JSONS"
            if [ -n "$JSONS" ]; then
              npx mochawesome-merge $JSONS > report/merged.json
              npx marge report/merged.json -f index -o report
              ls -la report
            else
              echo "3) No HTML and no JSONs – create fallback index.html"
              printf '%s\n' \
                '<!doctype html>' \
                '<html>' \
                '  <head><meta charset="utf-8"><title>Cypress Report</title></head>' \
                '  <body>' \
                '    <h1>Cypress Report</h1>' \
                '    <p>Brak plików raportu (HTML/JSON). Sprawdź konfigurację reportera i logi testów.</p>' \
                '  </body>' \
                '</html>' > report/index.html
              ls -la report
            fi
          fi

      # Spakuj raport dla Pages
      - name: Upload Pages artifact (report/)
        uses: actions/upload-pages-artifact@v3
        with:
          path: report

  deploy-pages:
    needs: full-regression
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
